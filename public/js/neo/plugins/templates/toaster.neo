<style>
    * {
        box-sizing: border-box;
        font-family: inherit;
    }   

    :host {
        inset: 0;
        width: 100%; 
        height: 100dvh;
        position: fixed;
        pointer-events: none;
        z-index: {{ @state.layer }};
    }

    [part="wrapper"] {
        gap: .5rem;
        width: 100%;
        height: 100%;
        margin: auto;
        padding: 1rem;
        display: flex;
        overflow: hidden;
        align-items: {{ @props.horisontal }};
        justify-content: {{ @props.vertical }};
        {$ if @props.vertical === "start" $}
            flex-direction: column-reverse;
        {$ else $}
            flex-direction: column;
        {$ endif $}
    }

    @media (min-width: 640px) {
        [part="wrapper"] {
            max-width: 640px;
        }
    }

    @media (min-width: 768px) {
        [part="wrapper"] {
            max-width: 768px;
        }
    }

    @media (min-width: 1024px) {
        [part="wrapper"] {
            max-width: 1024px;
        }
    }

    @media (min-width: 1280px) {
        [part="wrapper"] {
            max-width: 1280px;
        }
    }

    @media (min-width: 1536px) {
        [part="wrapper"] {
            max-width: 1536px;
        }
    }
</style>

<template name="neo-toaster">
    <div ref="wrapper" part="wrapper">
        <slot></slot>
    </div>
</template>

<script>
    export default {
        attrs: ["horisontal", "vertical"],
        props: {
            horisontal: "center",
            vertical: "end"
        },
        state: {
            layer: Neo.Helper.Theme.layer(),
        },
        rules: {
            layer() {
                const layer = Neo.Helper.Theme.layer();
                if (this.state.layer !== layer - 1) this.state.layer = layer;
            },
        },
        cycle: {
            created() {
                Neo.Toaster = this;
                this.toast = (content, theme, timer, position) => {
                    const toast = document.createElement("neo-toast");
                    toast.setProps({ timer: timer || 5000, theme: theme, position: position || "start" });
                    toast.innerHTML = `<div>${content}</div>`;
                    this.appendChild(toast);
                };
            },
            mounted() {
                this.state.observer = new MutationObserver((mutationsList, observer) =>{
                    for(const mutation of mutationsList)
                        if (mutation.type === 'childList')
                            this.rules.layer();                    
                });
                this.state.observer.observe(document.body, { childList: true, subtree: true });
            },
            removed() {
                this.state.observer.disconnect();
            },
            updated(name, prev, next, type) {
                Neo.Helper.option({
                    attrs: {
                        "vertical,horisontal": () => {
                            this.props[name] = next;
                        },
                    },
                    props: {
                        "vertical,horisontal": () => {
                            this.emit("change:" + name, {
                                data: next
                            });
                        },
                    }
                }[type], name);
            },
        }
    }
</script>