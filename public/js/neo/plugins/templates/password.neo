<style>
    * {
        box-sizing: border-box;
        font-family: inherit;
    }

    ::-webkit-search-cancel-button,
    ::-webkit-inner-spin-button,
    ::-webkit-outer-spin-button {
        {$ each _media into @Theme.MEDIA $}
            {{ _media }}appearance: none;
        {$ endeach $}
        display: none;
    }
    
    input {
        {$ each _media into @Theme.MEDIA $}
            {{ _media }}appearance: textfield;
        {$ endeach $}
    }

    :host {
        gap: .5rem;
        width: auto;
        max-width: 100%;
        flex-wrap: wrap;
        border-width: 1px;
        align-items: center;
        border-style: solid;
        display: inline-flex;
        border-radius: .25rem;
        padding: .5rem .75rem;
        {$ if @props.outline $}
            border-color: {{ @Theme.colors("BLACK") }};
        {$ else $}
            background: {{ @Theme.colors("LIGHT") }};
            border-color: {{ @Theme.colors("SHADE") }};
        {$ endif $}
    }

    {$ if !@props.disable $}
        :host(:focus),
        :host(:focus-within) {
            outline-width: 2px;
            outline-offset: -2px;
            outline-style: solid;
            outline-color: {{ @Theme.colors("PRIME", 400) }};
        }
    {$ endif $}

    [part="wrapper"] {
        flex: 1;
        width: 0%;
        display: flex;
        position: relative;
        flex-direction: column;
    }

    {$ if @truty(@props.label) $}
        [part="label"] {
            width: 100%;
            display: flex;
            overflow: hidden;
            font-weight: 600;
            inset: 0 0 auto 0;  
            position: absolute; 
            padding: .437rem 0;
            white-space: nowrap;
            flex-direction: column;
            text-overflow: ellipsis;
            justify-content: center;
            color: {{ @Theme.colors("BLACK", 50) }};
            font-size: {{ @Theme.sizes("BASE") }};
            line-height: {{ @Theme.lines("SMALL") }};
            {$ each _media into @Theme.MEDIA $}
                {{ _media }}transition: 200ms ease-in-out padding, 200ms ease-in-out color, 200ms ease-in-out font-size, 200ms ease-in-out line-height;
            {$ endeach $}
        }

        [part="label"]:has(+ [part="field"]:not(:placeholder-shown)),
        [part="label"]:has(+ [part="field"]:focus) {
            padding: 0;
            overflow: visible;
            color: {{ @Theme.colors("BLACK", 80) }};
            font-size: {{ @Theme.sizes("XSMALL") }};
            line-height: {{ @Theme.lines("THIN") }};
        }
    {$ endif $}

     [part="field"] {
        padding: 0;
        width: 100%;
        outline: none;
        border: unset;
        display: block;
        background: transparent;
        color: {{ @Theme.colors("BLACK") }};
        font-size: {{ @Theme.sizes("BASE") }};
        line-height: {{ @Theme.lines("SMALL") }};
        caret-color: {{ @Theme.colors("PRIME", 400) }};
        margin: {{ @truty(@props.label) ? ".75rem 0 0 0" : "0" }};
    }

    [part="trigger"] {
        padding: 0;
        border: unset;
        width: 1.2rem;
        height: 1.2rem;
        cursor: pointer;
        border-radius: .25rem; 
        pointer-events: auto;
        background: transparent;
        color: {{ @Theme.colors("BLACK") }};
        {$ if @props.disable $}
            cursor: default;
        {$ endif $}
    }

    [part="icon"] {
        width: 100%;
        height: 100%;
        pointer-events: none;
    }

    {$ if !@props.disable $}
        [part="trigger"]:focus,
        [part="trigger"]:focus-within {
            outline-width: 2px;
            outline-offset: 0px;
            outline-style: solid;
            outline-color: {{ @Theme.colors("PRIME", 400) }};
        }

        :host(:focus) [part="icon"],
        :host(:focus-within) [part="icon"] {
            color: {{ @Theme.colors("PRIME", 400) }};
        }
    {$ endif $}
</style>

<template name="neo-password" ctl="true">
    <slot name="start"></slot>
    <div ref="wrapper" part="wrapper">
        {$ if @truty(@props.label) $}
            <label ref="label" part="label" for="{{ @state.uid }}">{{ @props.label }}</label>
        {$ endif $}
        <input ref="field" part="field" id="{{ @state.uid }}" 
            {$ if @this.name $} name="{{ @this.name }}" {$ endif $}
            @keypress="{{ @rules.keypress }}" 
            @keydown="{{ @rules.keydown }}" 
            @change="{{ @rules.change }}" 
            @keyup="{{ @rules.keyup }}" 
            @input="{{ @rules.input }}" 
            @focus="{{ @rules.focus }}" 
            @blur="{{ @rules.blur }}" 
            value="{{ @props.value }}"
            type="{{ @state.type }}" 
            placeholder="{{ @when(@truty(@props.placeholder), @props.placeholder, ' ') }}"
            autocomplete="{{ @when(@props.fill, 'on', 'off') }}"
            {$ if @props.disable $} disabled="{{ @props.disable }}" {$ endif $}
        />
    </div>
    <button aria-label="trigger" ref="trigger" part="trigger" type="button" @click="{{ @rules.toggle }}" 
        {$ if @props.disable $} disabled="{{ @props.disable }}" {$ endif $}
    >
        <svg ref="icon" part="icon" fill="currentColor" viewBox="0 0 48 48">
            {$ if @state.type === "password" $}
                <path d="M24.0147 31.35C26.3382 31.35 28.3083 30.5368 29.925 28.9103C31.5416 27.2838 32.35 25.3088 32.35 22.9853C32.35 20.6618 31.5367 18.6917 29.9103 17.075C28.2838 15.4583 26.3088 14.65 23.9853 14.65C21.6617 14.65 19.6916 15.4632 18.075 17.0897C16.4583 18.7162 15.65 20.6912 15.65 23.0147C15.65 25.3382 16.4632 27.3083 18.0897 28.925C19.7161 30.5417 21.6911 31.35 24.0147 31.35ZM23.9941 27.8C22.6786 27.8 21.5507 27.3279 20.6104 26.3837C19.6701 25.4395 19.2 24.3096 19.2 22.9941C19.2 21.6786 19.6721 20.5507 20.6163 19.6104C21.5605 18.6701 22.6903 18.2 24.0059 18.2C25.3214 18.2 26.4493 18.6721 27.3896 19.6163C28.3298 20.5605 28.8 21.6904 28.8 23.0059C28.8 24.3214 28.3279 25.4493 27.3837 26.3896C26.4395 27.3299 25.3096 27.8 23.9941 27.8ZM24 39C19.3666 39 15.1508 37.7221 11.3525 35.1662C7.5542 32.6104 4.53668 29.2883 2.29995 25.2C2.09995 24.8695 1.94995 24.5092 1.84995 24.1191C1.74995 23.729 1.69995 23.3576 1.69995 23.0049C1.69995 22.6522 1.74995 22.2805 1.84995 21.8897C1.94995 21.4989 2.09995 21.119 2.29995 20.75C4.53668 16.695 7.5542 13.3896 11.3525 10.8338C15.1508 8.27793 19.3666 7 24 7C28.6333 7 32.8491 8.27793 36.6474 10.8338C40.4457 13.3896 43.4632 16.695 45.7 20.75C45.9 21.1139 46.05 21.4908 46.15 21.8809C46.25 22.271 46.3 22.6424 46.3 22.9951C46.3 23.3478 46.25 23.7195 46.15 24.1103C46.05 24.5011 45.9 24.8643 45.7 25.2C43.4632 29.2883 40.4457 32.6104 36.6474 35.1662C32.8491 37.7221 28.6333 39 24 39Z" />
            {$ else $}
                <path d="M40.3 44.9996L32.65 37.4496C31.2833 38.0163 29.875 38.4163 28.425 38.6496C26.975 38.8829 25.5 38.9996 24 38.9996C19.3666 38.9996 15.1333 37.7246 11.3 35.1746C7.46662 32.6246 4.43328 29.2996 2.19995 25.1996C1.99995 24.8663 1.86662 24.5079 1.79995 24.1246C1.73328 23.7413 1.69995 23.3663 1.69995 22.9996C1.69995 22.6329 1.73328 22.2579 1.79995 21.8746C1.86662 21.4913 1.99995 21.1329 2.19995 20.7996C2.99995 19.3663 3.88328 17.9663 4.84995 16.5996C5.81662 15.2329 6.91662 13.9829 8.14995 12.8496L1.99995 6.84961L4.39995 4.34961L42.55 42.4996L40.3 44.9996ZM24 31.3496C24.4 31.3496 24.775 31.3079 25.125 31.2246C25.475 31.1413 25.85 31.0329 26.25 30.8996L16 20.7496C15.8666 21.1496 15.775 21.5246 15.725 21.8746C15.675 22.2246 15.65 22.5996 15.65 22.9996C15.65 25.3329 16.4583 27.3079 18.075 28.9246C19.6916 30.5413 21.6666 31.3496 24 31.3496ZM39 33.7496L31.55 26.2996C31.8833 25.8663 32.1 25.3579 32.2 24.7746C32.3 24.1913 32.35 23.5996 32.35 22.9996C32.35 20.6663 31.5416 18.6913 29.925 17.0746C28.3083 15.4579 26.3333 14.6496 24 14.6496C23.4 14.6496 22.8166 14.7079 22.25 14.8246C21.6833 14.9413 21.1666 15.1329 20.7 15.3996L14.3 8.94961C15.8666 8.24961 17.4916 7.74961 19.175 7.44961C20.8583 7.14961 22.55 6.99961 24.25 6.99961C28.8833 6.99961 33.0916 8.29128 36.875 10.8746C40.6583 13.4579 43.65 16.7996 45.85 20.8996C46.05 21.2329 46.1916 21.5746 46.275 21.9246C46.3583 22.2746 46.4 22.6329 46.4 22.9996C46.4 23.3663 46.35 23.7246 46.25 24.0746C46.15 24.4246 46.0166 24.7663 45.85 25.0996C45.0166 26.7329 44.025 28.2996 42.875 29.7996C41.725 31.2996 40.4333 32.6163 39 33.7496ZM27.8 22.4996L24.15 18.8996C24.6833 18.6329 25.225 18.5246 25.775 18.5746C26.325 18.6246 26.8 18.8163 27.2 19.1496C27.6333 19.6163 27.9083 20.1663 28.025 20.7996C28.1416 21.4329 28.0666 21.9996 27.8 22.4996Z" />           
            {$ endif $}
        </svg>
    </button>
    <slot name="end"></slot>
</template>

<script>
    export default {
        attrs: ["label", "outline", "disable", "placeholder", "fill"],
        props: {
            label: "",
            value: "",
            fill: true,
            outline: false,
            disable: false,
            placeholder: "",
        },
        state: {
            uid: "uid_" + Neo.Helper.random(),
            type: "password",
        },
        rules: {
            focus() {
                this.emit("focus", { data: this.props.value });
            },
            blur() {
                this.emit("blur", { data: this.props.value });
            },
            change() {
                this.emit("change", { data: this.props.value });
            },
            keyup() {
                this.emit("keyup", { data: this.props.value });
            },
            keydown() {
                this.emit("keydown", { data: this.props.value });
            },
            keypress() {
                this.emit("keypress", { data: this.props.value });
            },
            input(event) {
                this.props.value = event.target.value;
                this.emit("input", { data: this.props.value });
            },
            toggle() {
                this.state.type = this.state.type === "password" ? "text" : "password";
            },
        },
        cycle: {
            created() {
                this.reset = function() {
                    this.state.type = "password";
                    this.props.value = "";
                    this.emit("reset");
                }
                this.focus = function() { this.refs.field.focus() }
                this.blur = function() { this.refs.field.blur() }
            },
            mounted() {
                if (this.hasAttribute("value")) {
                    this.props.value = this.getAttribute("value");
                    this.removeAttribute("value");
                }

                this.ctl.form && this.ctl.form.addEventListener("reset", this.reset.bind(this));
            },
            removed() {
                this.ctl.form && this.ctl.form.removeEventListener("reset", this.reset.bind(this));
            },
            updated(name, prev, next, type) {
                Neo.Helper.option({
                    attrs: {
                        "label,placeholder": () => {
                            this.props[name] = next;
                        },
                        "outline,disable,fill": () => {
                            this.props[name] = Neo.Helper.truty(next) || this.hasAttribute(name) && !["false", "null", "undefined"].includes(this.getAttribute(name));
                        }
                    },
                    state: {
                        "type": () => {
                            if (!["text", "password"].includes(next)) this.state.type = "password";
                            else this.emit("change:toggle", { data: next });
                        }
                    },
                    props: {
                        "label,placeholder,outline,disable,fill": () => {
                            this.emit("change:" + name, { 
                                data: next 
                            });
                        },
                        "value": () => {
                            this.ctl.setFormValue(next ? next : null);
                        }
                    }
                }[type], name);
            },
        },
    }
</script>