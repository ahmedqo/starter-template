<style>
    * {
        box-sizing: border-box;
        font-family: inherit;
    }

    :host {
        display: inline-flex;
        width: max-content;
        position: relative;
    }

    {$ if @props.label && @state.show $}
        [part="label"] {
            left: 50%;
            opacity: 0;
            display: flex;
            font-weight: 700;
            font-size: .75rem;
            width: max-content;
            position: absolute;
            pointer-events: none;
            padding:.1rem .25rem;
            border-radius: .25rem;
            z-index: {{ @Theme.layer() }};
            color: {{ @Theme.colors("WHITE") }};
            background: {{ @Theme.colors("GRAY", 800) }};
            {{ @state.pos ? "bottom" : "top" }}: 100%;
            {$ each _media into @Theme.MEDIA $}
                {{ _media }}transform: translateX(-50%);
                {{ _media }}transition: opacity 200ms ease-in-out;
            {$ endeach $}
        }

        :host(:hover) [part="label"] {
            opacity: 1;
        }
    {$ endif $}
</style>

<template name="neo-tooltip">
    <slot></slot>
    {$ if @props.label && @state.show $}
        <label part="label" ref="label">{{ @props.label }}</label>
    {$ endif $}
</template>

<script>
    export default {
        attrs: ["label"],
        props: {
            label: "",
        },
        state: {
            show: false,
            pos: "bottom",
        },
        rules: {
            enter() {
                this.state.show = true;
                /*const { x, y, height, width } = this.getBoundingClientRect();
                const labelWidth = this.refs.label.clientWidth;
                const labelHeight = this.refs.label.clientHeight;
                const scrollX = window.scrollX || window.pageXOffset;
                const scrollY = window.scrollY || window.pageYOffset;
                const posX = x + scrollX + (width - labelWidth) / 2;
                const posY = (y - labelHeight > 0)  ? y + scrollY - labelHeight : y + scrollY + height;

                this.state.pos = {
                    y: posY,
                    x: posX,
                };*/
                this.state.pos = this.getBoundingClientRect().y - this.refs.label.clientHeight > 0;
            },
            leave() {
                this.state.show = false;
            }
        },
        cycle: {
            mounted(){
                this.addEventListener("mouseenter", this.rules.enter);
                this.addEventListener("mouseleave", this.rules.leave);
            },
            removed(){
                this.removeEventListener("mouseenter", this.rules.enter);
                this.removeEventListener("mouseleave", this.rules.leave);
            },
            updated(name, prev, next, type) {
                Neo.Helper.option({
                    attrs: {
                        "label": () => {
                            this.props[name] = next;
                        },
                    },
                    props: {
                        "label": () => {
                            this.emit("change:" + name, { 
                                data: next 
                            });
                        }
                    }
                }[type], name);
            },
        }
    }
</script>