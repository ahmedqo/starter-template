<style>
    * {
        box-sizing: border-box;
        font-family: inherit;
    }

    {$ each media into @Theme.MEDIA $}
        @{{ media }}keyframes slide-up-off {
            0% { 
                opacity: 1; 
                {$ each _media into @Theme.MEDIA $}
                    {{ _media }}transform: translateY(0px); 
                {$ endeach $}
            }
            100% { 
                opacity: 0; 
                {$ each _media into @Theme.MEDIA $}
                    {{ _media }}transform: translateY(40px);
                {$ endeach $}
            }
        }

        @{{ media }}keyframes slide-down-off {
            0% { 
                opacity: 1; 
                {$ each _media into @Theme.MEDIA $}
                    {{ _media }}transform: translateY(0px);
                {$ endeach $}
            }
            100% { 
                opacity: 0; 
                {$ each _media into @Theme.MEDIA $}
                    {{ _media }}transform: translateY(-40px);
                {$ endeach $}
            }
        }

        @{{ media }}keyframes slide-up-on {
            0% { 
                opacity: 0; 
                {$ each _media into @Theme.MEDIA $}
                    {{ _media }}transform: translateY(40px);
                {$ endeach $}
            }
            100% { 
                opacity: 1; 
                {$ each _media into @Theme.MEDIA $}
                    {{ _media }}transform: translateY(0px);
                {$ endeach $}
            }
        }

        @{{ media }}keyframes slide-down-on {
            0% { 
                opacity: 0; 
                {$ each _media into @Theme.MEDIA $}
                    {{ _media }}transform: translateY(-40px);
                {$ endeach $}
            }
            100% { 
                opacity: 1; 
                {$ each _media into @Theme.MEDIA $}
                    {{ _media }}transform: translateY(0px);
                {$ endeach $}
            }
        }
    {$ endeach $}

    :host {
        gap: 1rem;
        padding: 1rem;
        display: flex;
        flex-wrap: wrap;
        max-width: 100%;
        font-weight: 600;
        min-width: 200px; 
        width: max-content;
        pointer-events: all;
        align-items: center;
        border-radius: .25rem;
        color: {{ @Theme.colors("WHITE") }};
        font-size: {{ @Theme.sizes("BASE") }};
        line-height: {{ @Theme.lines("BASE") }};
        border: 1px solid {{ @Theme.colors("BLACK", 10) }};
        background: var(--{{ @props.theme || "x" }}, {{ @Theme.colors("BLACK") }});
        {$ each _media into @Theme.MEDIA $}
            {{ _media }}box-shadow: 0px 8px 8px -8px {{ @Theme.colors("BLACK", 20) }};
            {{ _media }}animation: {{ "slide-" + (@state.position === "start" ? "down" : "up") + "-" + (@state.flip ? "off" : "on") }} 200ms ease-in-out forwards;
        {$ endeach $}
        
        --info: {{ @Theme.colors("BLUE", 500) }};
        --error: {{ @Theme.colors("RED", 500) }};
        --success: {{ @Theme.colors("GREEN", 500) }};
        --warning: {{ @Theme.colors("YELLOW", 500) }};
    }

    [part="icon"] {
        width: 1.5rem;
        height: 1.5rem;
        display: block;
        fill: currentColor;
        pointer-events: none;
        {$ if @props.position === "end" $}
            margin-inline-start: auto;
        {$ endif $}
    }

    ::slotted(*) {
        flex: 1;
    }

    @media (min-width: 1024px) {
        :host {
            max-width: 500px;
        }
    }
</style>

<template name="neo-toast">
    {$ if @props.position === "start" $}
        <svg ref="icon" part="icon" fill="currentColor" viewBox="0 0 48 48">
             {{ @state.path[@props.theme] }}
        </svg>
    {$ endif $}
    <slot></slot>
    {$ if @props.position === "end" $}
        <svg ref="icon" part="icon" fill="currentColor" viewBox="0 0 48 48">
             {{ @state.path[@props.theme] }}
        </svg>
    {$ endif $}
</template>

<script>
    export default {
        attrs: ["theme", "timer", "position"],
        props: {
            theme: "",
            timer: 5000,
            position: "start",
        },
        state: {
            position: "end",
            flip: false,
            path: {
                info: '<path d="M21.5484 47.25L21.3984 39.65L20.9484 39.6C15.9314 39.0334 11.7523 36.8917 8.41094 33.175C5.06927 29.4584 3.39844 25.0834 3.39844 20.05C3.39844 14.6167 5.3086 10.0084 9.12894 6.22505C12.9493 2.44172 17.5784 0.550049 23.0164 0.550049C25.7188 0.550049 28.2536 1.06438 30.6209 2.09305C32.9879 3.12205 35.0593 4.52205 36.8349 6.29305C38.6106 8.06438 40.0151 10.1392 41.0484 12.5175C42.0818 14.8962 42.5984 17.4362 42.5984 20.1375C42.5984 23.2249 42.0318 26.1155 40.8984 28.8095C39.7651 31.5032 38.2401 33.9917 36.3234 36.275C34.4068 38.5584 32.1723 40.6124 29.6199 42.437C27.0673 44.262 24.3768 45.8664 21.5484 47.25ZM23.0209 31.8C23.8059 31.8 24.4651 31.5259 24.9984 30.9775C25.5318 30.4292 25.7984 29.7709 25.7984 29.0025C25.7984 28.2342 25.5306 27.575 24.9949 27.025C24.4593 26.475 23.7946 26.2 23.0009 26.2C22.2326 26.2 21.5734 26.4742 21.0234 27.0225C20.4734 27.5709 20.1984 28.2292 20.1984 28.9975C20.1984 29.7659 20.4726 30.425 21.0209 30.975C21.5693 31.525 22.2359 31.8 23.0209 31.8ZM20.7984 24.85H25.1484C25.1484 23.85 25.2818 23.0834 25.5484 22.55C25.8151 22.0167 26.3818 21.3167 27.2484 20.45C27.9151 19.7834 28.4568 19.0947 28.8734 18.384C29.2901 17.6734 29.4984 16.8454 29.4984 15.9C29.4984 13.9334 28.8984 12.4667 27.6984 11.5C26.4984 10.5334 24.9651 10.05 23.0984 10.05C21.4701 10.05 20.0548 10.575 18.8524 11.625C17.6498 12.675 16.8151 13.9334 16.3484 15.4L20.3904 16.95C20.5958 16.35 20.9068 15.75 21.3234 15.15C21.7401 14.55 22.2984 14.25 22.9984 14.25C23.6818 14.25 24.1943 14.4219 24.5359 14.7655C24.8776 15.1092 25.0484 15.5207 25.0484 16C25.0484 16.4464 24.8901 16.8662 24.5734 17.2595C24.2568 17.6532 23.9151 18.0334 23.5484 18.4C22.3151 19.5 21.5484 20.4177 21.2484 21.153C20.9484 21.8884 20.7984 23.1207 20.7984 24.85Z" />',
                error: '<path d="M15.5492 44.3L3.69922 32.45V15.55L15.5492 3.69995H32.4492L44.2992 15.55V32.45L32.4492 44.3H15.5492ZM18.4992 33.2L23.9992 27.7L29.4992 33.2L33.1992 29.5L27.6992 24L33.1992 18.5L29.4992 14.8L23.9992 20.3L18.4992 14.8L14.7992 18.5L20.2992 24L14.7992 29.5L18.4992 33.2Z" />',
                success: '<path d="M13.05 39.65L-0.25 26.35L4.5 21.6L13.1 30.15L17.85 34.9L13.05 39.65ZM25.05 38.05L11.6 24.65L16.45 19.9L25.05 28.45L43.5 10L48.3 14.8L25.05 38.05ZM24.7 24.05L19.95 19.3L29.25 10L34 14.75L24.7 24.05Z" />',
                warning: '<path d="M39.7016 36.1V19.75H45.7016V36.1H39.7016ZM42.6946 45.75C41.7949 45.75 41.0377 45.4489 40.4231 44.8465C39.8087 44.2439 39.5016 43.4927 39.5016 42.593C39.5016 41.6934 39.8059 40.9362 40.4146 40.3215C41.0232 39.7072 41.7774 39.4 42.6771 39.4C43.5767 39.4 44.3307 39.7044 44.9391 40.313C45.5474 40.9217 45.8516 41.6759 45.8516 42.5755C45.8516 43.4752 45.5504 44.2292 44.9481 44.8375C44.3454 45.4459 43.5942 45.75 42.6946 45.75ZM24.1921 46C23.3317 46 22.4822 45.8334 21.6436 45.5C20.8049 45.1667 20.0409 44.65 19.3516 43.95L4.10156 28.75C3.4349 28.0834 2.9349 27.3325 2.60156 26.4975C2.26823 25.6625 2.10156 24.813 2.10156 23.949C2.10156 23.0497 2.26823 22.1917 2.60156 21.375C2.9349 20.5584 3.4349 19.8 4.10156 19.1L19.3516 3.90002C20.0536 3.23336 20.8221 2.73336 21.6571 2.40002C22.4921 2.06669 23.3416 1.90002 24.2056 1.90002C25.0696 1.90002 25.9174 2.06669 26.7491 2.40002C27.5807 2.73336 28.3316 3.23336 29.0016 3.90002L36.4516 11.2V22.55L24.2516 10.4L10.6016 23.95L24.2516 37.6L36.4516 25.45V36.65L29.0016 44C28.3196 44.6667 27.5626 45.1667 26.7306 45.5C25.8989 45.8334 25.0527 46 24.1921 46ZM24.2516 33.15L15.0516 24L24.2516 14.85L33.4016 24L24.2516 33.15Z" />',
            }
        },
        cycle: {
            created() {
                if (Neo.Toaster) {
                    this.state.position = Neo.Toaster.props.vertical;
                }
            },
            mounted() {
               setTimeout(() => {
                    this.state.flip = true;
                    setTimeout(() => {
                        this.remove();
                    }, 250);
                }, this.props.timer);
            },
            updated(name, prev, next, type) {
                Neo.Helper.option({
                    attrs: {
                        "theme,position": () => {
                            this.props[name] = next;
                        },
                        "timer": () => {
                            this.props[name] = +next || 5000;
                        }
                    },
                    props: {
                        "theme,timer,position": () => {
                            this.emit("change:" + name, { 
                                data: next 
                            });
                        }
                    }
                }[type], name);
            },
        }
    }
</script>